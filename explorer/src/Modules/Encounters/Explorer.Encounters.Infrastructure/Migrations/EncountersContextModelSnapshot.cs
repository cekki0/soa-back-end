// <auto-generated />
using System.Collections.Generic;
using Explorer.Encounters.Core.Domain.Encounter;
using Explorer.Encounters.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Explorer.Encounters.Infrastructure.Migrations
{
    [DbContext(typeof(EncountersContext))]
    partial class EncountersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("encounters")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.Encounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<EncounterInstance>>("Instances")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("XpReward")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Encounters", "encounters");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.TouristProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Xp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TouristProgress", "encounters");
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.HiddenLocationEncounter", b =>
                {
                    b.HasBaseType("Explorer.Encounters.Core.Domain.Encounter.Encounter");

                    b.Property<double>("PictureLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("PictureLongitude")
                        .HasColumnType("double precision");

                    b.ToTable("HiddenLocationEncounters", "encounters");
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.KeyPointEncounter", b =>
                {
                    b.HasBaseType("Explorer.Encounters.Core.Domain.Encounter.Encounter");

                    b.Property<long>("KeyPointId")
                        .HasColumnType("bigint");

                    b.ToTable("KeyPointEncounter", "encounters");
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.MiscEncounter", b =>
                {
                    b.HasBaseType("Explorer.Encounters.Core.Domain.Encounter.Encounter");

                    b.Property<bool>("ChallengeDone")
                        .HasColumnType("boolean");

                    b.ToTable("MiscEncounters", "encounters");
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.SocialEncounter", b =>
                {
                    b.HasBaseType("Explorer.Encounters.Core.Domain.Encounter.Encounter");

                    b.Property<int>("PeopleNumber")
                        .HasColumnType("integer");

                    b.ToTable("SocialEncounters", "encounters");
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.HiddenLocationEncounter", b =>
                {
                    b.HasOne("Explorer.Encounters.Core.Domain.Encounter.Encounter", null)
                        .WithOne()
                        .HasForeignKey("Explorer.Encounters.Core.Domain.Encounter.HiddenLocationEncounter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.KeyPointEncounter", b =>
                {
                    b.HasOne("Explorer.Encounters.Core.Domain.Encounter.Encounter", null)
                        .WithOne()
                        .HasForeignKey("Explorer.Encounters.Core.Domain.Encounter.KeyPointEncounter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.MiscEncounter", b =>
                {
                    b.HasOne("Explorer.Encounters.Core.Domain.Encounter.Encounter", null)
                        .WithOne()
                        .HasForeignKey("Explorer.Encounters.Core.Domain.Encounter.MiscEncounter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Explorer.Encounters.Core.Domain.Encounter.SocialEncounter", b =>
                {
                    b.HasOne("Explorer.Encounters.Core.Domain.Encounter.Encounter", null)
                        .WithOne()
                        .HasForeignKey("Explorer.Encounters.Core.Domain.Encounter.SocialEncounter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
